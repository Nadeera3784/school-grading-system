'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.18408
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("ibedgrading_dbDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class ibedgrading_dbDataSet
    Inherits Global.System.Data.DataSet
    
    Private tabletempsubjectgrade As tempsubjectgradeDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("tempsubjectgrade")) Is Nothing) Then
                MyBase.Tables.Add(New tempsubjectgradeDataTable(ds.Tables("tempsubjectgrade")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property tempsubjectgrade() As tempsubjectgradeDataTable
        Get
            Return Me.tabletempsubjectgrade
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As ibedgrading_dbDataSet = CType(MyBase.Clone,ibedgrading_dbDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("tempsubjectgrade")) Is Nothing) Then
                MyBase.Tables.Add(New tempsubjectgradeDataTable(ds.Tables("tempsubjectgrade")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabletempsubjectgrade = CType(MyBase.Tables("tempsubjectgrade"),tempsubjectgradeDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletempsubjectgrade) Is Nothing) Then
                Me.tabletempsubjectgrade.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "ibedgrading_dbDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ibedgrading_dbDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabletempsubjectgrade = New tempsubjectgradeDataTable()
        MyBase.Tables.Add(Me.tabletempsubjectgrade)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializetempsubjectgrade() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ibedgrading_dbDataSet = New ibedgrading_dbDataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub tempsubjectgradeRowChangeEventHandler(ByVal sender As Object, ByVal e As tempsubjectgradeRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class tempsubjectgradeDataTable
        Inherits Global.System.Data.TypedTableBase(Of tempsubjectgradeRow)
        
        Private columnTSGId As Global.System.Data.DataColumn
        
        Private columnkQuiz As Global.System.Data.DataColumn
        
        Private columnKExam As Global.System.Data.DataColumn
        
        Private columnKTotal As Global.System.Data.DataColumn
        
        Private columnKEquivalent As Global.System.Data.DataColumn
        
        Private columnKPercent As Global.System.Data.DataColumn
        
        Private columnPQuiz As Global.System.Data.DataColumn
        
        Private columnPExam As Global.System.Data.DataColumn
        
        Private columnPTotal As Global.System.Data.DataColumn
        
        Private columnPEquivalent As Global.System.Data.DataColumn
        
        Private columnPPercent As Global.System.Data.DataColumn
        
        Private columnUQuiz As Global.System.Data.DataColumn
        
        Private columnUExam As Global.System.Data.DataColumn
        
        Private columnUTotal As Global.System.Data.DataColumn
        
        Private columnUEquivalent As Global.System.Data.DataColumn
        
        Private columnUPercent As Global.System.Data.DataColumn
        
        Private columnPPPP As Global.System.Data.DataColumn
        
        Private columnPPEQuivalent As Global.System.Data.DataColumn
        
        Private columnPPPercent As Global.System.Data.DataColumn
        
        Private columnFG As Global.System.Data.DataColumn
        
        Private columnLG As Global.System.Data.DataColumn
        
        Private columnTIQuiz As Global.System.Data.DataColumn
        
        Private columnTIExam As Global.System.Data.DataColumn
        
        Private columnStudentName As Global.System.Data.DataColumn
        
        Private columnTeacherName As Global.System.Data.DataColumn
        
        Private columnSY As Global.System.Data.DataColumn
        
        Private columnGradeSection As Global.System.Data.DataColumn
        
        Private columnGradeSubject As Global.System.Data.DataColumn
        
        Private columnGradingPeriod As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "tempsubjectgrade"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TSGIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTSGId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property kQuizColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnkQuiz
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property KExamColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKExam
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property KTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property KEquivalentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKEquivalent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property KPercentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnKPercent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PQuizColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPQuiz
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PExamColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPExam
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PEquivalentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPEquivalent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PPercentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPPercent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UQuizColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUQuiz
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UExamColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUExam
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UEquivalentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUEquivalent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property UPercentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUPercent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PPPPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPPPP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PPEQuivalentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPPEQuivalent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property PPPercentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPPPercent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property FGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property LGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TIQuizColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIQuiz
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TIExamColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTIExam
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property StudentNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStudentName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property TeacherNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTeacherName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property SYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GradeSectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGradeSection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GradeSubjectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGradeSubject
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property GradingPeriodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGradingPeriod
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As tempsubjectgradeRow
            Get
                Return CType(Me.Rows(index),tempsubjectgradeRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tempsubjectgradeRowChanging As tempsubjectgradeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tempsubjectgradeRowChanged As tempsubjectgradeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tempsubjectgradeRowDeleting As tempsubjectgradeRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event tempsubjectgradeRowDeleted As tempsubjectgradeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub AddtempsubjectgradeRow(ByVal row As tempsubjectgradeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function AddtempsubjectgradeRow( _
                    ByVal TSGId As UInteger,  _
                    ByVal kQuiz As String,  _
                    ByVal KExam As String,  _
                    ByVal KTotal As String,  _
                    ByVal KEquivalent As String,  _
                    ByVal KPercent As String,  _
                    ByVal PQuiz As String,  _
                    ByVal PExam As String,  _
                    ByVal PTotal As String,  _
                    ByVal PEquivalent As String,  _
                    ByVal PPercent As String,  _
                    ByVal UQuiz As String,  _
                    ByVal UExam As String,  _
                    ByVal UTotal As String,  _
                    ByVal UEquivalent As String,  _
                    ByVal UPercent As String,  _
                    ByVal PPPP As String,  _
                    ByVal PPEQuivalent As String,  _
                    ByVal PPPercent As String,  _
                    ByVal FG As String,  _
                    ByVal LG As String,  _
                    ByVal TIQuiz As String,  _
                    ByVal TIExam As String,  _
                    ByVal StudentName As String,  _
                    ByVal TeacherName As String,  _
                    ByVal SY As String,  _
                    ByVal GradeSection As String,  _
                    ByVal GradeSubject As String,  _
                    ByVal GradingPeriod As String) As tempsubjectgradeRow
            Dim rowtempsubjectgradeRow As tempsubjectgradeRow = CType(Me.NewRow,tempsubjectgradeRow)
            Dim columnValuesArray() As Object = New Object() {TSGId, kQuiz, KExam, KTotal, KEquivalent, KPercent, PQuiz, PExam, PTotal, PEquivalent, PPercent, UQuiz, UExam, UTotal, UEquivalent, UPercent, PPPP, PPEQuivalent, PPPercent, FG, LG, TIQuiz, TIExam, StudentName, TeacherName, SY, GradeSection, GradeSubject, GradingPeriod}
            rowtempsubjectgradeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtempsubjectgradeRow)
            Return rowtempsubjectgradeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByTSGId(ByVal TSGId As UInteger) As tempsubjectgradeRow
            Return CType(Me.Rows.Find(New Object() {TSGId}),tempsubjectgradeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As tempsubjectgradeDataTable = CType(MyBase.Clone,tempsubjectgradeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New tempsubjectgradeDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnTSGId = MyBase.Columns("TSGId")
            Me.columnkQuiz = MyBase.Columns("kQuiz")
            Me.columnKExam = MyBase.Columns("KExam")
            Me.columnKTotal = MyBase.Columns("KTotal")
            Me.columnKEquivalent = MyBase.Columns("KEquivalent")
            Me.columnKPercent = MyBase.Columns("KPercent")
            Me.columnPQuiz = MyBase.Columns("PQuiz")
            Me.columnPExam = MyBase.Columns("PExam")
            Me.columnPTotal = MyBase.Columns("PTotal")
            Me.columnPEquivalent = MyBase.Columns("PEquivalent")
            Me.columnPPercent = MyBase.Columns("PPercent")
            Me.columnUQuiz = MyBase.Columns("UQuiz")
            Me.columnUExam = MyBase.Columns("UExam")
            Me.columnUTotal = MyBase.Columns("UTotal")
            Me.columnUEquivalent = MyBase.Columns("UEquivalent")
            Me.columnUPercent = MyBase.Columns("UPercent")
            Me.columnPPPP = MyBase.Columns("PPPP")
            Me.columnPPEQuivalent = MyBase.Columns("PPEQuivalent")
            Me.columnPPPercent = MyBase.Columns("PPPercent")
            Me.columnFG = MyBase.Columns("FG")
            Me.columnLG = MyBase.Columns("LG")
            Me.columnTIQuiz = MyBase.Columns("TIQuiz")
            Me.columnTIExam = MyBase.Columns("TIExam")
            Me.columnStudentName = MyBase.Columns("StudentName")
            Me.columnTeacherName = MyBase.Columns("TeacherName")
            Me.columnSY = MyBase.Columns("SY")
            Me.columnGradeSection = MyBase.Columns("GradeSection")
            Me.columnGradeSubject = MyBase.Columns("GradeSubject")
            Me.columnGradingPeriod = MyBase.Columns("GradingPeriod")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnTSGId = New Global.System.Data.DataColumn("TSGId", GetType(UInteger), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTSGId)
            Me.columnkQuiz = New Global.System.Data.DataColumn("kQuiz", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnkQuiz)
            Me.columnKExam = New Global.System.Data.DataColumn("KExam", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKExam)
            Me.columnKTotal = New Global.System.Data.DataColumn("KTotal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKTotal)
            Me.columnKEquivalent = New Global.System.Data.DataColumn("KEquivalent", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKEquivalent)
            Me.columnKPercent = New Global.System.Data.DataColumn("KPercent", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnKPercent)
            Me.columnPQuiz = New Global.System.Data.DataColumn("PQuiz", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPQuiz)
            Me.columnPExam = New Global.System.Data.DataColumn("PExam", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPExam)
            Me.columnPTotal = New Global.System.Data.DataColumn("PTotal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPTotal)
            Me.columnPEquivalent = New Global.System.Data.DataColumn("PEquivalent", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPEquivalent)
            Me.columnPPercent = New Global.System.Data.DataColumn("PPercent", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPPercent)
            Me.columnUQuiz = New Global.System.Data.DataColumn("UQuiz", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUQuiz)
            Me.columnUExam = New Global.System.Data.DataColumn("UExam", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUExam)
            Me.columnUTotal = New Global.System.Data.DataColumn("UTotal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUTotal)
            Me.columnUEquivalent = New Global.System.Data.DataColumn("UEquivalent", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUEquivalent)
            Me.columnUPercent = New Global.System.Data.DataColumn("UPercent", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUPercent)
            Me.columnPPPP = New Global.System.Data.DataColumn("PPPP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPPPP)
            Me.columnPPEQuivalent = New Global.System.Data.DataColumn("PPEQuivalent", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPPEQuivalent)
            Me.columnPPPercent = New Global.System.Data.DataColumn("PPPercent", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPPPercent)
            Me.columnFG = New Global.System.Data.DataColumn("FG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFG)
            Me.columnLG = New Global.System.Data.DataColumn("LG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLG)
            Me.columnTIQuiz = New Global.System.Data.DataColumn("TIQuiz", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIQuiz)
            Me.columnTIExam = New Global.System.Data.DataColumn("TIExam", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTIExam)
            Me.columnStudentName = New Global.System.Data.DataColumn("StudentName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStudentName)
            Me.columnTeacherName = New Global.System.Data.DataColumn("TeacherName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTeacherName)
            Me.columnSY = New Global.System.Data.DataColumn("SY", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSY)
            Me.columnGradeSection = New Global.System.Data.DataColumn("GradeSection", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGradeSection)
            Me.columnGradeSubject = New Global.System.Data.DataColumn("GradeSubject", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGradeSubject)
            Me.columnGradingPeriod = New Global.System.Data.DataColumn("GradingPeriod", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGradingPeriod)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTSGId}, true))
            Me.columnTSGId.AllowDBNull = false
            Me.columnTSGId.Unique = true
            Me.columnkQuiz.AllowDBNull = false
            Me.columnkQuiz.MaxLength = 45
            Me.columnKExam.AllowDBNull = false
            Me.columnKExam.MaxLength = 45
            Me.columnKTotal.AllowDBNull = false
            Me.columnKTotal.MaxLength = 45
            Me.columnKEquivalent.AllowDBNull = false
            Me.columnKEquivalent.MaxLength = 45
            Me.columnKPercent.AllowDBNull = false
            Me.columnKPercent.MaxLength = 45
            Me.columnPQuiz.AllowDBNull = false
            Me.columnPQuiz.MaxLength = 45
            Me.columnPExam.AllowDBNull = false
            Me.columnPExam.MaxLength = 45
            Me.columnPTotal.AllowDBNull = false
            Me.columnPTotal.MaxLength = 45
            Me.columnPEquivalent.AllowDBNull = false
            Me.columnPEquivalent.MaxLength = 45
            Me.columnPPercent.AllowDBNull = false
            Me.columnPPercent.MaxLength = 45
            Me.columnUQuiz.AllowDBNull = false
            Me.columnUQuiz.MaxLength = 45
            Me.columnUExam.AllowDBNull = false
            Me.columnUExam.MaxLength = 45
            Me.columnUTotal.AllowDBNull = false
            Me.columnUTotal.MaxLength = 45
            Me.columnUEquivalent.AllowDBNull = false
            Me.columnUEquivalent.MaxLength = 45
            Me.columnUPercent.AllowDBNull = false
            Me.columnUPercent.MaxLength = 45
            Me.columnPPPP.AllowDBNull = false
            Me.columnPPPP.MaxLength = 45
            Me.columnPPEQuivalent.AllowDBNull = false
            Me.columnPPEQuivalent.MaxLength = 45
            Me.columnPPPercent.AllowDBNull = false
            Me.columnPPPercent.MaxLength = 45
            Me.columnFG.AllowDBNull = false
            Me.columnFG.MaxLength = 45
            Me.columnLG.AllowDBNull = false
            Me.columnLG.MaxLength = 45
            Me.columnTIQuiz.AllowDBNull = false
            Me.columnTIQuiz.MaxLength = 45
            Me.columnTIExam.AllowDBNull = false
            Me.columnTIExam.MaxLength = 45
            Me.columnStudentName.AllowDBNull = false
            Me.columnStudentName.MaxLength = 45
            Me.columnTeacherName.AllowDBNull = false
            Me.columnTeacherName.MaxLength = 45
            Me.columnSY.AllowDBNull = false
            Me.columnSY.MaxLength = 45
            Me.columnGradeSection.AllowDBNull = false
            Me.columnGradeSection.MaxLength = 100
            Me.columnGradeSubject.AllowDBNull = false
            Me.columnGradeSubject.MaxLength = 100
            Me.columnGradingPeriod.AllowDBNull = false
            Me.columnGradingPeriod.MaxLength = 100
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function NewtempsubjectgradeRow() As tempsubjectgradeRow
            Return CType(Me.NewRow,tempsubjectgradeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New tempsubjectgradeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(tempsubjectgradeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.tempsubjectgradeRowChangedEvent) Is Nothing) Then
                RaiseEvent tempsubjectgradeRowChanged(Me, New tempsubjectgradeRowChangeEvent(CType(e.Row,tempsubjectgradeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.tempsubjectgradeRowChangingEvent) Is Nothing) Then
                RaiseEvent tempsubjectgradeRowChanging(Me, New tempsubjectgradeRowChangeEvent(CType(e.Row,tempsubjectgradeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.tempsubjectgradeRowDeletedEvent) Is Nothing) Then
                RaiseEvent tempsubjectgradeRowDeleted(Me, New tempsubjectgradeRowChangeEvent(CType(e.Row,tempsubjectgradeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.tempsubjectgradeRowDeletingEvent) Is Nothing) Then
                RaiseEvent tempsubjectgradeRowDeleting(Me, New tempsubjectgradeRowChangeEvent(CType(e.Row,tempsubjectgradeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub RemovetempsubjectgradeRow(ByVal row As tempsubjectgradeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As ibedgrading_dbDataSet = New ibedgrading_dbDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "tempsubjectgradeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class tempsubjectgradeRow
        Inherits Global.System.Data.DataRow
        
        Private tabletempsubjectgrade As tempsubjectgradeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletempsubjectgrade = CType(Me.Table,tempsubjectgradeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TSGId() As UInteger
            Get
                Return CType(Me(Me.tabletempsubjectgrade.TSGIdColumn),UInteger)
            End Get
            Set
                Me(Me.tabletempsubjectgrade.TSGIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property kQuiz() As String
            Get
                Return CType(Me(Me.tabletempsubjectgrade.kQuizColumn),String)
            End Get
            Set
                Me(Me.tabletempsubjectgrade.kQuizColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property KExam() As String
            Get
                Return CType(Me(Me.tabletempsubjectgrade.KExamColumn),String)
            End Get
            Set
                Me(Me.tabletempsubjectgrade.KExamColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property KTotal() As String
            Get
                Return CType(Me(Me.tabletempsubjectgrade.KTotalColumn),String)
            End Get
            Set
                Me(Me.tabletempsubjectgrade.KTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property KEquivalent() As String
            Get
                Return CType(Me(Me.tabletempsubjectgrade.KEquivalentColumn),String)
            End Get
            Set
                Me(Me.tabletempsubjectgrade.KEquivalentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property KPercent() As String
            Get
                Return CType(Me(Me.tabletempsubjectgrade.KPercentColumn),String)
            End Get
            Set
                Me(Me.tabletempsubjectgrade.KPercentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PQuiz() As String
            Get
                Return CType(Me(Me.tabletempsubjectgrade.PQuizColumn),String)
            End Get
            Set
                Me(Me.tabletempsubjectgrade.PQuizColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PExam() As String
            Get
                Return CType(Me(Me.tabletempsubjectgrade.PExamColumn),String)
            End Get
            Set
                Me(Me.tabletempsubjectgrade.PExamColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PTotal() As String
            Get
                Return CType(Me(Me.tabletempsubjectgrade.PTotalColumn),String)
            End Get
            Set
                Me(Me.tabletempsubjectgrade.PTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PEquivalent() As String
            Get
                Return CType(Me(Me.tabletempsubjectgrade.PEquivalentColumn),String)
            End Get
            Set
                Me(Me.tabletempsubjectgrade.PEquivalentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PPercent() As String
            Get
                Return CType(Me(Me.tabletempsubjectgrade.PPercentColumn),String)
            End Get
            Set
                Me(Me.tabletempsubjectgrade.PPercentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UQuiz() As String
            Get
                Return CType(Me(Me.tabletempsubjectgrade.UQuizColumn),String)
            End Get
            Set
                Me(Me.tabletempsubjectgrade.UQuizColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UExam() As String
            Get
                Return CType(Me(Me.tabletempsubjectgrade.UExamColumn),String)
            End Get
            Set
                Me(Me.tabletempsubjectgrade.UExamColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UTotal() As String
            Get
                Return CType(Me(Me.tabletempsubjectgrade.UTotalColumn),String)
            End Get
            Set
                Me(Me.tabletempsubjectgrade.UTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UEquivalent() As String
            Get
                Return CType(Me(Me.tabletempsubjectgrade.UEquivalentColumn),String)
            End Get
            Set
                Me(Me.tabletempsubjectgrade.UEquivalentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UPercent() As String
            Get
                Return CType(Me(Me.tabletempsubjectgrade.UPercentColumn),String)
            End Get
            Set
                Me(Me.tabletempsubjectgrade.UPercentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PPPP() As String
            Get
                Return CType(Me(Me.tabletempsubjectgrade.PPPPColumn),String)
            End Get
            Set
                Me(Me.tabletempsubjectgrade.PPPPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PPEQuivalent() As String
            Get
                Return CType(Me(Me.tabletempsubjectgrade.PPEQuivalentColumn),String)
            End Get
            Set
                Me(Me.tabletempsubjectgrade.PPEQuivalentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property PPPercent() As String
            Get
                Return CType(Me(Me.tabletempsubjectgrade.PPPercentColumn),String)
            End Get
            Set
                Me(Me.tabletempsubjectgrade.PPPercentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property FG() As String
            Get
                Return CType(Me(Me.tabletempsubjectgrade.FGColumn),String)
            End Get
            Set
                Me(Me.tabletempsubjectgrade.FGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property LG() As String
            Get
                Return CType(Me(Me.tabletempsubjectgrade.LGColumn),String)
            End Get
            Set
                Me(Me.tabletempsubjectgrade.LGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TIQuiz() As String
            Get
                Return CType(Me(Me.tabletempsubjectgrade.TIQuizColumn),String)
            End Get
            Set
                Me(Me.tabletempsubjectgrade.TIQuizColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TIExam() As String
            Get
                Return CType(Me(Me.tabletempsubjectgrade.TIExamColumn),String)
            End Get
            Set
                Me(Me.tabletempsubjectgrade.TIExamColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property StudentName() As String
            Get
                Return CType(Me(Me.tabletempsubjectgrade.StudentNameColumn),String)
            End Get
            Set
                Me(Me.tabletempsubjectgrade.StudentNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property TeacherName() As String
            Get
                Return CType(Me(Me.tabletempsubjectgrade.TeacherNameColumn),String)
            End Get
            Set
                Me(Me.tabletempsubjectgrade.TeacherNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property SY() As String
            Get
                Return CType(Me(Me.tabletempsubjectgrade.SYColumn),String)
            End Get
            Set
                Me(Me.tabletempsubjectgrade.SYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GradeSection() As String
            Get
                Return CType(Me(Me.tabletempsubjectgrade.GradeSectionColumn),String)
            End Get
            Set
                Me(Me.tabletempsubjectgrade.GradeSectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GradeSubject() As String
            Get
                Return CType(Me(Me.tabletempsubjectgrade.GradeSubjectColumn),String)
            End Get
            Set
                Me(Me.tabletempsubjectgrade.GradeSubjectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property GradingPeriod() As String
            Get
                Return CType(Me(Me.tabletempsubjectgrade.GradingPeriodColumn),String)
            End Get
            Set
                Me(Me.tabletempsubjectgrade.GradingPeriodColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class tempsubjectgradeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As tempsubjectgradeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As tempsubjectgradeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As tempsubjectgradeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace ibedgrading_dbDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class tempsubjectgradeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.MySql.Data.MySqlClient.MySqlDataAdapter
        
        Private _connection As Global.MySql.Data.MySqlClient.MySqlConnection
        
        Private _transaction As Global.MySql.Data.MySqlClient.MySqlTransaction
        
        Private _commandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.MySql.Data.MySqlClient.MySqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.MySql.Data.MySqlClient.MySqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.MySql.Data.MySqlClient.MySqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.MySql.Data.MySqlClient.MySqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.MySql.Data.MySqlClient.MySqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.MySql.Data.MySqlClient.MySqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "tempsubjectgrade"
            tableMapping.ColumnMappings.Add("TSGId", "TSGId")
            tableMapping.ColumnMappings.Add("kQuiz", "kQuiz")
            tableMapping.ColumnMappings.Add("KExam", "KExam")
            tableMapping.ColumnMappings.Add("KTotal", "KTotal")
            tableMapping.ColumnMappings.Add("KEquivalent", "KEquivalent")
            tableMapping.ColumnMappings.Add("KPercent", "KPercent")
            tableMapping.ColumnMappings.Add("PQuiz", "PQuiz")
            tableMapping.ColumnMappings.Add("PExam", "PExam")
            tableMapping.ColumnMappings.Add("PTotal", "PTotal")
            tableMapping.ColumnMappings.Add("PEquivalent", "PEquivalent")
            tableMapping.ColumnMappings.Add("PPercent", "PPercent")
            tableMapping.ColumnMappings.Add("UQuiz", "UQuiz")
            tableMapping.ColumnMappings.Add("UExam", "UExam")
            tableMapping.ColumnMappings.Add("UTotal", "UTotal")
            tableMapping.ColumnMappings.Add("UEquivalent", "UEquivalent")
            tableMapping.ColumnMappings.Add("UPercent", "UPercent")
            tableMapping.ColumnMappings.Add("PPPP", "PPPP")
            tableMapping.ColumnMappings.Add("PPEQuivalent", "PPEQuivalent")
            tableMapping.ColumnMappings.Add("PPPercent", "PPPercent")
            tableMapping.ColumnMappings.Add("FG", "FG")
            tableMapping.ColumnMappings.Add("LG", "LG")
            tableMapping.ColumnMappings.Add("TIQuiz", "TIQuiz")
            tableMapping.ColumnMappings.Add("TIExam", "TIExam")
            tableMapping.ColumnMappings.Add("StudentName", "StudentName")
            tableMapping.ColumnMappings.Add("TeacherName", "TeacherName")
            tableMapping.ColumnMappings.Add("SY", "SY")
            tableMapping.ColumnMappings.Add("GradeSection", "GradeSection")
            tableMapping.ColumnMappings.Add("GradeSubject", "GradeSubject")
            tableMapping.ColumnMappings.Add("GradingPeriod", "GradingPeriod")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM `tempsubjectgrade` WHERE ((`TSGId` = @Original_TSGId) AND (`kQuiz` = "& _ 
                "@Original_kQuiz) AND (`KExam` = @Original_KExam) AND (`KTotal` = @Original_KTota"& _ 
                "l) AND (`KEquivalent` = @Original_KEquivalent) AND (`KPercent` = @Original_KPerc"& _ 
                "ent) AND (`PQuiz` = @Original_PQuiz) AND (`PExam` = @Original_PExam) AND (`PTota"& _ 
                "l` = @Original_PTotal) AND (`PEquivalent` = @Original_PEquivalent) AND (`PPercen"& _ 
                "t` = @Original_PPercent) AND (`UQuiz` = @Original_UQuiz) AND (`UExam` = @Origina"& _ 
                "l_UExam) AND (`UTotal` = @Original_UTotal) AND (`UEquivalent` = @Original_UEquiv"& _ 
                "alent) AND (`UPercent` = @Original_UPercent) AND (`PPPP` = @Original_PPPP) AND ("& _ 
                "`PPEQuivalent` = @Original_PPEQuivalent) AND (`PPPercent` = @Original_PPPercent)"& _ 
                " AND (`FG` = @Original_FG) AND (`LG` = @Original_LG) AND (`TIQuiz` = @Original_T"& _ 
                "IQuiz) AND (`TIExam` = @Original_TIExam) AND (`StudentName` = @Original_StudentN"& _ 
                "ame) AND (`TeacherName` = @Original_TeacherName) AND (`SY` = @Original_SY) AND ("& _ 
                "`GradeSection` = @Original_GradeSection) AND (`GradeSubject` = @Original_GradeSu"& _ 
                "bject) AND (`GradingPeriod` = @Original_GradingPeriod))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Dim param As Global.MySql.Data.MySqlClient.MySqlParameter = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_TSGId"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "TSGId"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_kQuiz"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "kQuiz"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_KExam"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "KExam"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_KTotal"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "KTotal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_KEquivalent"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "KEquivalent"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_KPercent"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "KPercent"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_PQuiz"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PQuiz"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_PExam"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PExam"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_PTotal"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PTotal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_PEquivalent"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PEquivalent"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_PPercent"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PPercent"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_UQuiz"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "UQuiz"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_UExam"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "UExam"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_UTotal"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "UTotal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_UEquivalent"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "UEquivalent"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_UPercent"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "UPercent"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_PPPP"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PPPP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_PPEQuivalent"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PPEQuivalent"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_PPPercent"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PPPercent"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_FG"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "FG"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LG"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LG"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_TIQuiz"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "TIQuiz"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_TIExam"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "TIExam"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_StudentName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_TeacherName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "TeacherName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_SY"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_GradeSection"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GradeSection"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_GradeSubject"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GradeSubject"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_GradingPeriod"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GradingPeriod"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.DeleteCommand.Parameters.Add(param)
            Me._adapter.InsertCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO `tempsubjectgrade` (`kQuiz`, `KExam`, `KTotal`, `KEquivalent`, `KPerc"& _ 
                "ent`, `PQuiz`, `PExam`, `PTotal`, `PEquivalent`, `PPercent`, `UQuiz`, `UExam`, `"& _ 
                "UTotal`, `UEquivalent`, `UPercent`, `PPPP`, `PPEQuivalent`, `PPPercent`, `FG`, `"& _ 
                "LG`, `TIQuiz`, `TIExam`, `StudentName`, `TeacherName`, `SY`, `GradeSection`, `Gr"& _ 
                "adeSubject`, `GradingPeriod`) VALUES (@kQuiz, @KExam, @KTotal, @KEquivalent, @KP"& _ 
                "ercent, @PQuiz, @PExam, @PTotal, @PEquivalent, @PPercent, @UQuiz, @UExam, @UTota"& _ 
                "l, @UEquivalent, @UPercent, @PPPP, @PPEQuivalent, @PPPercent, @FG, @LG, @TIQuiz,"& _ 
                " @TIExam, @StudentName, @TeacherName, @SY, @GradeSection, @GradeSubject, @Gradin"& _ 
                "gPeriod)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@kQuiz"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "kQuiz"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@KExam"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "KExam"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@KTotal"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "KTotal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@KEquivalent"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "KEquivalent"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@KPercent"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "KPercent"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@PQuiz"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PQuiz"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@PExam"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PExam"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@PTotal"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PTotal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@PEquivalent"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PEquivalent"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@PPercent"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PPercent"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@UQuiz"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "UQuiz"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@UExam"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "UExam"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@UTotal"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "UTotal"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@UEquivalent"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "UEquivalent"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@UPercent"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "UPercent"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@PPPP"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PPPP"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@PPEQuivalent"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PPEQuivalent"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@PPPercent"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PPPercent"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@FG"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "FG"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LG"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LG"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@TIQuiz"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "TIQuiz"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@TIExam"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "TIExam"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@StudentName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentName"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@TeacherName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "TeacherName"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@SY"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SY"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@GradeSection"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GradeSection"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@GradeSubject"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GradeSubject"
            Me._adapter.InsertCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@GradingPeriod"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GradingPeriod"
            Me._adapter.InsertCommand.Parameters.Add(param)
            Me._adapter.UpdateCommand = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE `tempsubjectgrade` SET `kQuiz` = @kQuiz, `KExam` = @KExam, `KTotal` = @KTo"& _ 
                "tal, `KEquivalent` = @KEquivalent, `KPercent` = @KPercent, `PQuiz` = @PQuiz, `PE"& _ 
                "xam` = @PExam, `PTotal` = @PTotal, `PEquivalent` = @PEquivalent, `PPercent` = @P"& _ 
                "Percent, `UQuiz` = @UQuiz, `UExam` = @UExam, `UTotal` = @UTotal, `UEquivalent` ="& _ 
                " @UEquivalent, `UPercent` = @UPercent, `PPPP` = @PPPP, `PPEQuivalent` = @PPEQuiv"& _ 
                "alent, `PPPercent` = @PPPercent, `FG` = @FG, `LG` = @LG, `TIQuiz` = @TIQuiz, `TI"& _ 
                "Exam` = @TIExam, `StudentName` = @StudentName, `TeacherName` = @TeacherName, `SY"& _ 
                "` = @SY, `GradeSection` = @GradeSection, `GradeSubject` = @GradeSubject, `Gradin"& _ 
                "gPeriod` = @GradingPeriod WHERE ((`TSGId` = @Original_TSGId) AND (`kQuiz` = @Ori"& _ 
                "ginal_kQuiz) AND (`KExam` = @Original_KExam) AND (`KTotal` = @Original_KTotal) A"& _ 
                "ND (`KEquivalent` = @Original_KEquivalent) AND (`KPercent` = @Original_KPercent)"& _ 
                " AND (`PQuiz` = @Original_PQuiz) AND (`PExam` = @Original_PExam) AND (`PTotal` ="& _ 
                " @Original_PTotal) AND (`PEquivalent` = @Original_PEquivalent) AND (`PPercent` ="& _ 
                " @Original_PPercent) AND (`UQuiz` = @Original_UQuiz) AND (`UExam` = @Original_UE"& _ 
                "xam) AND (`UTotal` = @Original_UTotal) AND (`UEquivalent` = @Original_UEquivalen"& _ 
                "t) AND (`UPercent` = @Original_UPercent) AND (`PPPP` = @Original_PPPP) AND (`PPE"& _ 
                "Quivalent` = @Original_PPEQuivalent) AND (`PPPercent` = @Original_PPPercent) AND"& _ 
                " (`FG` = @Original_FG) AND (`LG` = @Original_LG) AND (`TIQuiz` = @Original_TIQui"& _ 
                "z) AND (`TIExam` = @Original_TIExam) AND (`StudentName` = @Original_StudentName)"& _ 
                " AND (`TeacherName` = @Original_TeacherName) AND (`SY` = @Original_SY) AND (`Gra"& _ 
                "deSection` = @Original_GradeSection) AND (`GradeSubject` = @Original_GradeSubjec"& _ 
                "t) AND (`GradingPeriod` = @Original_GradingPeriod))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@kQuiz"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "kQuiz"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@KExam"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "KExam"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@KTotal"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "KTotal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@KEquivalent"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "KEquivalent"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@KPercent"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "KPercent"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@PQuiz"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PQuiz"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@PExam"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PExam"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@PTotal"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PTotal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@PEquivalent"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PEquivalent"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@PPercent"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PPercent"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@UQuiz"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "UQuiz"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@UExam"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "UExam"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@UTotal"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "UTotal"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@UEquivalent"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "UEquivalent"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@UPercent"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "UPercent"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@PPPP"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PPPP"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@PPEQuivalent"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PPEQuivalent"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@PPPercent"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PPPercent"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@FG"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "FG"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@LG"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LG"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@TIQuiz"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "TIQuiz"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@TIExam"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "TIExam"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@StudentName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentName"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@TeacherName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "TeacherName"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@SY"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SY"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@GradeSection"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GradeSection"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@GradeSubject"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GradeSubject"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@GradingPeriod"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GradingPeriod"
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_TSGId"
            param.DbType = Global.System.Data.DbType.UInt32
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.UInt32
            param.IsNullable = true
            param.SourceColumn = "TSGId"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_kQuiz"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "kQuiz"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_KExam"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "KExam"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_KTotal"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "KTotal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_KEquivalent"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "KEquivalent"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_KPercent"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "KPercent"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_PQuiz"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PQuiz"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_PExam"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PExam"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_PTotal"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PTotal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_PEquivalent"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PEquivalent"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_PPercent"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PPercent"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_UQuiz"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "UQuiz"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_UExam"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "UExam"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_UTotal"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "UTotal"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_UEquivalent"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "UEquivalent"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_UPercent"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "UPercent"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_PPPP"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PPPP"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_PPEQuivalent"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PPEQuivalent"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_PPPercent"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "PPPercent"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_FG"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "FG"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_LG"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "LG"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_TIQuiz"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "TIQuiz"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_TIExam"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "TIExam"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_StudentName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "StudentName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_TeacherName"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "TeacherName"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_SY"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "SY"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_GradeSection"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GradeSection"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_GradeSubject"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GradeSubject"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
            param = New Global.MySql.Data.MySqlClient.MySqlParameter()
            param.ParameterName = "@Original_GradingPeriod"
            param.DbType = Global.System.Data.DbType.[String]
            param.MySqlDbType = Global.MySql.Data.MySqlClient.MySqlDbType.VarChar
            param.IsNullable = true
            param.SourceColumn = "GradingPeriod"
            param.SourceVersion = Global.System.Data.DataRowVersion.Original
            Me._adapter.UpdateCommand.Parameters.Add(param)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.MySql.Data.MySqlClient.MySqlConnection()
            Me._connection.ConnectionString = Global.IBEDGradingSystem.My.MySettings.Default.ibedgrading_dbConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.MySql.Data.MySqlClient.MySqlCommand(0) {}
            Me._commandCollection(0) = New Global.MySql.Data.MySqlClient.MySqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT `TSGId`, `kQuiz`, `KExam`, `KTotal`, `KEquivalent`, `KPercent`, `PQuiz`, `"& _ 
                "PExam`, `PTotal`, `PEquivalent`, `PPercent`, `UQuiz`, `UExam`, `UTotal`, `UEquiv"& _ 
                "alent`, `UPercent`, `PPPP`, `PPEQuivalent`, `PPPercent`, `FG`, `LG`, `TIQuiz`, `"& _ 
                "TIExam`, `StudentName`, `TeacherName`, `SY`, `GradeSection`, `GradeSubject`, `Gr"& _ 
                "adingPeriod` FROM `tempsubjectgrade`"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ibedgrading_dbDataSet.tempsubjectgradeDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ibedgrading_dbDataSet.tempsubjectgradeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ibedgrading_dbDataSet.tempsubjectgradeDataTable = New ibedgrading_dbDataSet.tempsubjectgradeDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ibedgrading_dbDataSet.tempsubjectgradeDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ibedgrading_dbDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "tempsubjectgrade")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_TSGId As UInteger,  _
                    ByVal Original_kQuiz As String,  _
                    ByVal Original_KExam As String,  _
                    ByVal Original_KTotal As String,  _
                    ByVal Original_KEquivalent As String,  _
                    ByVal Original_KPercent As String,  _
                    ByVal Original_PQuiz As String,  _
                    ByVal Original_PExam As String,  _
                    ByVal Original_PTotal As String,  _
                    ByVal Original_PEquivalent As String,  _
                    ByVal Original_PPercent As String,  _
                    ByVal Original_UQuiz As String,  _
                    ByVal Original_UExam As String,  _
                    ByVal Original_UTotal As String,  _
                    ByVal Original_UEquivalent As String,  _
                    ByVal Original_UPercent As String,  _
                    ByVal Original_PPPP As String,  _
                    ByVal Original_PPEQuivalent As String,  _
                    ByVal Original_PPPercent As String,  _
                    ByVal Original_FG As String,  _
                    ByVal Original_LG As String,  _
                    ByVal Original_TIQuiz As String,  _
                    ByVal Original_TIExam As String,  _
                    ByVal Original_StudentName As String,  _
                    ByVal Original_TeacherName As String,  _
                    ByVal Original_SY As String,  _
                    ByVal Original_GradeSection As String,  _
                    ByVal Original_GradeSubject As String,  _
                    ByVal Original_GradingPeriod As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_TSGId,UInteger)
            If (Original_kQuiz Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_kQuiz")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_kQuiz,String)
            End If
            If (Original_KExam Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_KExam")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_KExam,String)
            End If
            If (Original_KTotal Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_KTotal")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_KTotal,String)
            End If
            If (Original_KEquivalent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_KEquivalent")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_KEquivalent,String)
            End If
            If (Original_KPercent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_KPercent")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_KPercent,String)
            End If
            If (Original_PQuiz Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PQuiz")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_PQuiz,String)
            End If
            If (Original_PExam Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PExam")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_PExam,String)
            End If
            If (Original_PTotal Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PTotal")
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_PTotal,String)
            End If
            If (Original_PEquivalent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PEquivalent")
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_PEquivalent,String)
            End If
            If (Original_PPercent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PPercent")
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_PPercent,String)
            End If
            If (Original_UQuiz Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_UQuiz")
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_UQuiz,String)
            End If
            If (Original_UExam Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_UExam")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_UExam,String)
            End If
            If (Original_UTotal Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_UTotal")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_UTotal,String)
            End If
            If (Original_UEquivalent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_UEquivalent")
            Else
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_UEquivalent,String)
            End If
            If (Original_UPercent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_UPercent")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_UPercent,String)
            End If
            If (Original_PPPP Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PPPP")
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_PPPP,String)
            End If
            If (Original_PPEQuivalent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PPEQuivalent")
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_PPEQuivalent,String)
            End If
            If (Original_PPPercent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PPPercent")
            Else
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_PPPercent,String)
            End If
            If (Original_FG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FG")
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_FG,String)
            End If
            If (Original_LG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LG")
            Else
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_LG,String)
            End If
            If (Original_TIQuiz Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TIQuiz")
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_TIQuiz,String)
            End If
            If (Original_TIExam Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TIExam")
            Else
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_TIExam,String)
            End If
            If (Original_StudentName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentName")
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_StudentName,String)
            End If
            If (Original_TeacherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TeacherName")
            Else
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_TeacherName,String)
            End If
            If (Original_SY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SY")
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_SY,String)
            End If
            If (Original_GradeSection Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_GradeSection")
            Else
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_GradeSection,String)
            End If
            If (Original_GradeSubject Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_GradeSubject")
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_GradeSubject,String)
            End If
            If (Original_GradingPeriod Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_GradingPeriod")
            Else
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_GradingPeriod,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal kQuiz As String,  _
                    ByVal KExam As String,  _
                    ByVal KTotal As String,  _
                    ByVal KEquivalent As String,  _
                    ByVal KPercent As String,  _
                    ByVal PQuiz As String,  _
                    ByVal PExam As String,  _
                    ByVal PTotal As String,  _
                    ByVal PEquivalent As String,  _
                    ByVal PPercent As String,  _
                    ByVal UQuiz As String,  _
                    ByVal UExam As String,  _
                    ByVal UTotal As String,  _
                    ByVal UEquivalent As String,  _
                    ByVal UPercent As String,  _
                    ByVal PPPP As String,  _
                    ByVal PPEQuivalent As String,  _
                    ByVal PPPercent As String,  _
                    ByVal FG As String,  _
                    ByVal LG As String,  _
                    ByVal TIQuiz As String,  _
                    ByVal TIExam As String,  _
                    ByVal StudentName As String,  _
                    ByVal TeacherName As String,  _
                    ByVal SY As String,  _
                    ByVal GradeSection As String,  _
                    ByVal GradeSubject As String,  _
                    ByVal GradingPeriod As String) As Integer
            If (kQuiz Is Nothing) Then
                Throw New Global.System.ArgumentNullException("kQuiz")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(kQuiz,String)
            End If
            If (KExam Is Nothing) Then
                Throw New Global.System.ArgumentNullException("KExam")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(KExam,String)
            End If
            If (KTotal Is Nothing) Then
                Throw New Global.System.ArgumentNullException("KTotal")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(KTotal,String)
            End If
            If (KEquivalent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("KEquivalent")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(KEquivalent,String)
            End If
            If (KPercent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("KPercent")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(KPercent,String)
            End If
            If (PQuiz Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PQuiz")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(PQuiz,String)
            End If
            If (PExam Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PExam")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(PExam,String)
            End If
            If (PTotal Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PTotal")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(PTotal,String)
            End If
            If (PEquivalent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PEquivalent")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(PEquivalent,String)
            End If
            If (PPercent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PPercent")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(PPercent,String)
            End If
            If (UQuiz Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UQuiz")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(UQuiz,String)
            End If
            If (UExam Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UExam")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(UExam,String)
            End If
            If (UTotal Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UTotal")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(UTotal,String)
            End If
            If (UEquivalent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UEquivalent")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(UEquivalent,String)
            End If
            If (UPercent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UPercent")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(UPercent,String)
            End If
            If (PPPP Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PPPP")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(PPPP,String)
            End If
            If (PPEQuivalent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PPEQuivalent")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(PPEQuivalent,String)
            End If
            If (PPPercent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PPPercent")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(PPPercent,String)
            End If
            If (FG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FG")
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(FG,String)
            End If
            If (LG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LG")
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(LG,String)
            End If
            If (TIQuiz Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TIQuiz")
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(TIQuiz,String)
            End If
            If (TIExam Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TIExam")
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(TIExam,String)
            End If
            If (StudentName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StudentName")
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(StudentName,String)
            End If
            If (TeacherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TeacherName")
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(TeacherName,String)
            End If
            If (SY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SY")
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(SY,String)
            End If
            If (GradeSection Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GradeSection")
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(GradeSection,String)
            End If
            If (GradeSubject Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GradeSubject")
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(GradeSubject,String)
            End If
            If (GradingPeriod Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GradingPeriod")
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(GradingPeriod,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal kQuiz As String,  _
                    ByVal KExam As String,  _
                    ByVal KTotal As String,  _
                    ByVal KEquivalent As String,  _
                    ByVal KPercent As String,  _
                    ByVal PQuiz As String,  _
                    ByVal PExam As String,  _
                    ByVal PTotal As String,  _
                    ByVal PEquivalent As String,  _
                    ByVal PPercent As String,  _
                    ByVal UQuiz As String,  _
                    ByVal UExam As String,  _
                    ByVal UTotal As String,  _
                    ByVal UEquivalent As String,  _
                    ByVal UPercent As String,  _
                    ByVal PPPP As String,  _
                    ByVal PPEQuivalent As String,  _
                    ByVal PPPercent As String,  _
                    ByVal FG As String,  _
                    ByVal LG As String,  _
                    ByVal TIQuiz As String,  _
                    ByVal TIExam As String,  _
                    ByVal StudentName As String,  _
                    ByVal TeacherName As String,  _
                    ByVal SY As String,  _
                    ByVal GradeSection As String,  _
                    ByVal GradeSubject As String,  _
                    ByVal GradingPeriod As String,  _
                    ByVal Original_TSGId As UInteger,  _
                    ByVal Original_kQuiz As String,  _
                    ByVal Original_KExam As String,  _
                    ByVal Original_KTotal As String,  _
                    ByVal Original_KEquivalent As String,  _
                    ByVal Original_KPercent As String,  _
                    ByVal Original_PQuiz As String,  _
                    ByVal Original_PExam As String,  _
                    ByVal Original_PTotal As String,  _
                    ByVal Original_PEquivalent As String,  _
                    ByVal Original_PPercent As String,  _
                    ByVal Original_UQuiz As String,  _
                    ByVal Original_UExam As String,  _
                    ByVal Original_UTotal As String,  _
                    ByVal Original_UEquivalent As String,  _
                    ByVal Original_UPercent As String,  _
                    ByVal Original_PPPP As String,  _
                    ByVal Original_PPEQuivalent As String,  _
                    ByVal Original_PPPercent As String,  _
                    ByVal Original_FG As String,  _
                    ByVal Original_LG As String,  _
                    ByVal Original_TIQuiz As String,  _
                    ByVal Original_TIExam As String,  _
                    ByVal Original_StudentName As String,  _
                    ByVal Original_TeacherName As String,  _
                    ByVal Original_SY As String,  _
                    ByVal Original_GradeSection As String,  _
                    ByVal Original_GradeSubject As String,  _
                    ByVal Original_GradingPeriod As String) As Integer
            If (kQuiz Is Nothing) Then
                Throw New Global.System.ArgumentNullException("kQuiz")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(kQuiz,String)
            End If
            If (KExam Is Nothing) Then
                Throw New Global.System.ArgumentNullException("KExam")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(KExam,String)
            End If
            If (KTotal Is Nothing) Then
                Throw New Global.System.ArgumentNullException("KTotal")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(KTotal,String)
            End If
            If (KEquivalent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("KEquivalent")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(KEquivalent,String)
            End If
            If (KPercent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("KPercent")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(KPercent,String)
            End If
            If (PQuiz Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PQuiz")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(PQuiz,String)
            End If
            If (PExam Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PExam")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(PExam,String)
            End If
            If (PTotal Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PTotal")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(PTotal,String)
            End If
            If (PEquivalent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PEquivalent")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(PEquivalent,String)
            End If
            If (PPercent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PPercent")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(PPercent,String)
            End If
            If (UQuiz Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UQuiz")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(UQuiz,String)
            End If
            If (UExam Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UExam")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(UExam,String)
            End If
            If (UTotal Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UTotal")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(UTotal,String)
            End If
            If (UEquivalent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UEquivalent")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(UEquivalent,String)
            End If
            If (UPercent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("UPercent")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(UPercent,String)
            End If
            If (PPPP Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PPPP")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(PPPP,String)
            End If
            If (PPEQuivalent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PPEQuivalent")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(PPEQuivalent,String)
            End If
            If (PPPercent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PPPercent")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(PPPercent,String)
            End If
            If (FG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FG")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(FG,String)
            End If
            If (LG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LG")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(LG,String)
            End If
            If (TIQuiz Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TIQuiz")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(TIQuiz,String)
            End If
            If (TIExam Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TIExam")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(TIExam,String)
            End If
            If (StudentName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("StudentName")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(StudentName,String)
            End If
            If (TeacherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TeacherName")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(TeacherName,String)
            End If
            If (SY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("SY")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(SY,String)
            End If
            If (GradeSection Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GradeSection")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(GradeSection,String)
            End If
            If (GradeSubject Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GradeSubject")
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(GradeSubject,String)
            End If
            If (GradingPeriod Is Nothing) Then
                Throw New Global.System.ArgumentNullException("GradingPeriod")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(GradingPeriod,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_TSGId,UInteger)
            If (Original_kQuiz Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_kQuiz")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_kQuiz,String)
            End If
            If (Original_KExam Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_KExam")
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_KExam,String)
            End If
            If (Original_KTotal Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_KTotal")
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_KTotal,String)
            End If
            If (Original_KEquivalent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_KEquivalent")
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_KEquivalent,String)
            End If
            If (Original_KPercent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_KPercent")
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_KPercent,String)
            End If
            If (Original_PQuiz Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PQuiz")
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_PQuiz,String)
            End If
            If (Original_PExam Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PExam")
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_PExam,String)
            End If
            If (Original_PTotal Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PTotal")
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_PTotal,String)
            End If
            If (Original_PEquivalent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PEquivalent")
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_PEquivalent,String)
            End If
            If (Original_PPercent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PPercent")
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_PPercent,String)
            End If
            If (Original_UQuiz Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_UQuiz")
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_UQuiz,String)
            End If
            If (Original_UExam Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_UExam")
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_UExam,String)
            End If
            If (Original_UTotal Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_UTotal")
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_UTotal,String)
            End If
            If (Original_UEquivalent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_UEquivalent")
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_UEquivalent,String)
            End If
            If (Original_UPercent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_UPercent")
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_UPercent,String)
            End If
            If (Original_PPPP Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PPPP")
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_PPPP,String)
            End If
            If (Original_PPEQuivalent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PPEQuivalent")
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_PPEQuivalent,String)
            End If
            If (Original_PPPercent Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_PPPercent")
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_PPPercent,String)
            End If
            If (Original_FG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_FG")
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_FG,String)
            End If
            If (Original_LG Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LG")
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_LG,String)
            End If
            If (Original_TIQuiz Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TIQuiz")
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_TIQuiz,String)
            End If
            If (Original_TIExam Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TIExam")
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_TIExam,String)
            End If
            If (Original_StudentName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_StudentName")
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_StudentName,String)
            End If
            If (Original_TeacherName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_TeacherName")
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_TeacherName,String)
            End If
            If (Original_SY Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_SY")
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_SY,String)
            End If
            If (Original_GradeSection Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_GradeSection")
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_GradeSection,String)
            End If
            If (Original_GradeSubject Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_GradeSubject")
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_GradeSubject,String)
            End If
            If (Original_GradingPeriod Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_GradingPeriod")
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(Original_GradingPeriod,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _tempsubjectgradeTableAdapter As tempsubjectgradeTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property tempsubjectgradeTableAdapter() As tempsubjectgradeTableAdapter
            Get
                Return Me._tempsubjectgradeTableAdapter
            End Get
            Set
                Me._tempsubjectgradeTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._tempsubjectgradeTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tempsubjectgradeTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tempsubjectgradeTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._tempsubjectgradeTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As ibedgrading_dbDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._tempsubjectgradeTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.tempsubjectgrade.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tempsubjectgradeTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As ibedgrading_dbDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._tempsubjectgradeTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.tempsubjectgrade.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tempsubjectgradeTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As ibedgrading_dbDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._tempsubjectgradeTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.tempsubjectgrade.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tempsubjectgradeTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As ibedgrading_dbDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._tempsubjectgradeTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tempsubjectgradeTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._tempsubjectgradeTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tempsubjectgradeTableAdapter, Me._tempsubjectgradeTableAdapter.Connection)
                    Me._tempsubjectgradeTableAdapter.Connection = CType(workConnection,Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._tempsubjectgradeTableAdapter.Transaction = CType(workTransaction,Global.MySql.Data.MySqlClient.MySqlTransaction)
                    If Me._tempsubjectgradeTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tempsubjectgradeTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tempsubjectgradeTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._tempsubjectgradeTableAdapter) Is Nothing) Then
                    Me._tempsubjectgradeTableAdapter.Connection = CType(revertConnections(Me._tempsubjectgradeTableAdapter),Global.MySql.Data.MySqlClient.MySqlConnection)
                    Me._tempsubjectgradeTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
